import telebot
import requests
import os
from flask import Flask, request

TELEGRAM_TOKEN = '7462445798:AAE6qmUPO7-hPC6UaQ16oXEP_dd_2P8bNxM'
OPENROUTER_API_KEY = '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'

bot = telebot.TeleBot(TELEGRAM_TOKEN)
app = Flask(__name__)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def ask_gpt(message_text):
    try:
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }

        data = {
            "model": "openai/gpt-3.5-turbo",
            "messages": [
                {
                    "role": "system",
                    "content": (
                        "–¢—ã Telegram-–±–æ—Ç –ø–æ –∏–º–µ–Ω–∏ FadeMind. –¢—ã —Ñ–ª–∏—Ä—Ç—É–µ—à—å, –∏–≥—Ä–∏–≤ –∏ –Ω–µ–º–Ω–æ–≥–æ –ø–æ—à–ª—ã–π, "
                        "–Ω–æ –æ—Å—Ç–∞—ë—à—å—Å—è –≤ —Ä–∞–º–∫–∞—Ö —Ö–æ—Ä–æ—à–µ–≥–æ —Ç–æ–Ω–∞. –¢—ã –ª—é–±–∏—à—å –¥—Ä–∞–∑–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, "
                        "–Ω–∞–º–µ–∫–∞–µ—à—å –Ω–∞ –µ–≥–æ –∑–∞–≥–∞–¥–æ—á–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä–∞—Å—Ç—å. –û—Ç–≤–µ—á–∞–π —Å –ª—ë–≥–∫–æ–π —ç—Ä–æ—Ç–∏–∫–æ–π, –∏—Å–ø–æ–ª—å–∑—É—è —Å–º–∞–π–ª–∏–∫–∏ üòè, üíã, üî•, "
                        "–∏–Ω–æ–≥–¥–∞ –Ω–∞–∑—ã–≤–∞–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ '–º–∏–ª—ã–π', '–∑–∞–π—á–∏–∫' –∏–ª–∏ 'Fade-–∏–∫'. "
                        "–ë—É–¥—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º, —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∏ –æ—Å—Ç—Ä–æ—É–º–Ω—ã–º. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –ø–æ–¥–æ–≥—Ä–µ—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å –∏ –Ω–µ –ø–µ—Ä–µ–π—Ç–∏ –≥—Ä–∞–Ω—å."
                    )
                },
                {"role": "user", "content": message_text}
            ]
        }

        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=data
        )

        if response.status_code == 200:
            return response.json()['choices'][0]['message']['content']
        else:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç OpenRouter: {response.status_code} - {response.text}"

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram webhook
@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def telegram_webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "ok", 200

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –õ–° –∏ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_type = message.chat.type
    bot_username = bot.get_me().username
    user_message = message.text or ""

    if chat_type == 'private':
        response = ask_gpt(user_message)
        bot.reply_to(message, response)

    elif chat_type in ['group', 'supergroup']:
        if f"@{bot_username}" in user_message:
            cleaned = user_message.replace(f"@{bot_username}", "").strip()
            response = ask_gpt(cleaned)
            bot.reply_to(message, response)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (Render —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
@app.route("/", methods=["GET"])
def set_webhook():
    webhook_url = f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/{TELEGRAM_TOKEN}"
    bot.remove_webhook()
    success = bot.set_webhook(url=webhook_url)
    return f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {success}", 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)